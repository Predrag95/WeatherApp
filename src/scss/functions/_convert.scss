@use 'sass:math';
@use '@sass-collective/strip-unit';

// CONVERT TO REM
@function convert-to-rem($value, $base-value: 16) {
  $value: math.div(strip-unit.strip($value), strip-unit.strip($base-value)) * 1rem;

  @if ($value ==0) {
    $value: 0;
  }

  // Turn 0rem into 0
  @return $value;
}

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
@function rem-calc($values, $base-value: 16) {
  $max: length($values);

  @if $max ==1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }

  $rem-values: (
  );

@for $i from 1 through $max {
  $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
}

@return $rem-values;
}

/// Get a white or black contrast color for any color (on WCAG standards).
/// param {color} $color - The color to get the contrast color.
/// return {color} - The contrast color.
@function color-contrast($color) {
  $color-brightness: math.round((color.red($color) * 299) + (color.green($color) * 587) + math.div(color.blue($color) * 114, 1000));
  $light-color: math.round((color.red(#fff) * 299) + (color.green(#fff) * 587) + math.div(color.blue(#fff) * 114, 1000));

  @if abs($color-brightness) < math.div($light-color, 2) {
    @return hsl(0 0% 100%);
  }

  @else {
    @return hsl(0 100% 0%);
  }
}